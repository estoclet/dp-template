{#
/**
 * @file
 * Bootstrap Barrio's theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}
{%
  set classes = [
  'node',
  'node--type-' ~ node.bundle|clean_class,
  node.isPromoted() ? 'node--promoted',
  node.isSticky() ? 'node--sticky',
  not node.isPublished() ? 'node--unpublished',
  view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  'clearfix',
  ]
  %}  
  <article{{ attributes.addClass(classes) }}>
    <div class="content">
      <div class="container">
        {{ content.social_simple_buttons }}
        <div class="auteur-aside">
          {% if content.field_auteur_secondaire is not empty %}
            {{ content.field_auteur_secondaire }}
          {% endif %}
          {% if content.field_reading_time is not empty %}
            <div class="reading-time-value">{{ content.field_reading_time }}</div>
          {% endif %}
        </div>
      </div>
      {{ content|without('field_reading_time','social_simple_buttons', 'field_auteur_secondaire') }}
      <div class="wrapper wrapper-small">
        {% if content.field_auteur_secondaire is not empty %}
          {% for key, secondary_author in content.field_auteur_secondaire if key|slice(0,1) != '#' %}
            <div class="auteur-description">
            {% set node_author = secondary_author['#user'] %}
            {% if "blog_editor" in node_author.getroles(TRUE)  %}
              {% set firstname = node_author.field_user_firstname.value %}
              {% set lastname = node_author.field_user_lastname.value %}
              {% set authorURL = path('view.blog.page_blog_author', { 'arg_0': (firstname ~ '_' ~ lastname)|drupal_escape })  %}
              {% set fullname = firstname~' '~lastname %}
              {% set portrait = {
                '#theme':      'image_style',
                '#style_name': 'auteur',
                '#uri':        node_author.field_media_reference.entity.field_media_image.entity.uri.value,
                '#alt':        fullname,
                '#width':      node_author.field_media_reference.entity.field_media_image.entity.width,
                '#height':     node_author.field_media_reference.entity.field_media_image.entity.height,
                '#attributes': { class: 'img-circle' },
                }
              %}
              {% set fonction = node_author.field_function.value %}
              {% set linkedin = node_author.field_user_linkedin.uri %}
            {% endif %}
            {% if node_author.field_media_reference is not empty %}
              <a href="{{ authorURL }}" rel="bookmark" title="{{ fullname }}">{{ portrait }}</a>
            {% endif %}
            {% if authorURL is not empty %}
              <div class="auteur-infos">
                <a href="{{ authorURL }}" rel="author">
                  <div class="auteur">{{ fullname }}</div>
                  {% if node_author.field_entite_reference is not empty %}
                    <div class="auteur-entite">{{ node_author.field_entite_reference.entity.name.value }}</div>
                  {% endif %}
                  {% if fonction is not empty %}
                    <div class="auteur-fonction">{{ fonction }}</div>
                  {% endif %}
                </a>
                {% if linkedin is not empty %}
                  <div class="auteur-linkedin">
                    <a href="{{ linkedin }}" title="{% trans %}Suivre sur Linkedin{%  endtrans %}" class="icon"><i class="cdcicon cdcicon-linkedin"  aria-hidden="true"></i></a>
                  </div>
                {% endif %}
              </div>
            {% endif %}
            </div>
          {% endfor %}
        {% endif %}
      </div>
    </div>
  </article>